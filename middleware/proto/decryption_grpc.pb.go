// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: decryption.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DecryptionServiceClient is the client API for DecryptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecryptionServiceClient interface {
	Decryption(ctx context.Context, in *DecryptionRequest, opts ...grpc.CallOption) (*DecryptionResponse, error)
}

type decryptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDecryptionServiceClient(cc grpc.ClientConnInterface) DecryptionServiceClient {
	return &decryptionServiceClient{cc}
}

func (c *decryptionServiceClient) Decryption(ctx context.Context, in *DecryptionRequest, opts ...grpc.CallOption) (*DecryptionResponse, error) {
	out := new(DecryptionResponse)
	err := c.cc.Invoke(ctx, "/middleware.DecryptionService/Decryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecryptionServiceServer is the server API for DecryptionService service.
// All implementations must embed UnimplementedDecryptionServiceServer
// for forward compatibility
type DecryptionServiceServer interface {
	Decryption(context.Context, *DecryptionRequest) (*DecryptionResponse, error)
	mustEmbedUnimplementedDecryptionServiceServer()
}

// UnimplementedDecryptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDecryptionServiceServer struct {
}

func (UnimplementedDecryptionServiceServer) Decryption(context.Context, *DecryptionRequest) (*DecryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decryption not implemented")
}
func (UnimplementedDecryptionServiceServer) mustEmbedUnimplementedDecryptionServiceServer() {}

// UnsafeDecryptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecryptionServiceServer will
// result in compilation errors.
type UnsafeDecryptionServiceServer interface {
	mustEmbedUnimplementedDecryptionServiceServer()
}

func RegisterDecryptionServiceServer(s grpc.ServiceRegistrar, srv DecryptionServiceServer) {
	s.RegisterService(&DecryptionService_ServiceDesc, srv)
}

func _DecryptionService_Decryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecryptionServiceServer).Decryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleware.DecryptionService/Decryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecryptionServiceServer).Decryption(ctx, req.(*DecryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DecryptionService_ServiceDesc is the grpc.ServiceDesc for DecryptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DecryptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "middleware.DecryptionService",
	HandlerType: (*DecryptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Decryption",
			Handler:    _DecryptionService_Decryption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "decryption.proto",
}
